18.05.08

DTO 설명 -> DTO_test
DAO 설명 -> DAO_test

-------------------------------------------------
비즈니스 로직이란 ?
업무에 필요한 데이터 처리를 수행하는 "응용프로그램의 일부"이며,
데이터 입력, 수정, 조회 및 보고서 처리 등을 수행하는 루틴, 좀 더 엄밀히 말하면 보이는 것의 그 뒤에서 일어나는 각종 처리를 의미.
대게 client program 은 user interface and business logic 으로 구성, server program 은 business logic 으로만 구성되어 있다.

회원가입 시를 예로 들면,

1. 중복 아이디가 있는지 없는지를 검사하기위한 일련의 과정들
2. 유저에게 단순히 텍스트나 다이얼로그로 알려주는 것이 있습니다.

2번째 영역은 흔히, Presentation 영역 혹은 View 영역 이라고 많이 불리우는데,
가공된 데이터를 단순히 표시만 해주는 것입니다. (ex 아이디가 중복됬습니다 표시, 비밀번호 재 검사를 실패 했습니다. 등등)
그 데이터 가공을 담당하는것이 1번째 영역 흔히들 Logic 영역, Model 영역이라 불립니다. (흔히 "비즈니스 로직" 이라 부름)

비즈니스 로직의 예 :
        회원이 작성한 아이디 값 저장하기 -> 회원정보가 있는 데이터베이스 연결 -> 데이터베이스에 회원이 작성한 아이디 값이 있는지 Select ->
        회원의 아이디가 이미 있는지 없는지 여부를 데이터화 하여 저장 -> 데이터베이스 연결 끊기 -> View영역에게 가공된 데이터 전달

이러한 비즈니스 로직은 유저 눈엔 보이진 않지만, 유저가 바라는 결과물을 올바르게 도출하기 위해 코드로 짜여집니다.
즉, 프로그래머는 유저가 원하는 행위를 컴퓨터에게 잘 전달하기 위해서는 비즈니스 로직을 잘 구상해야 한다는 의미입니다.

출처: http://mommoo.tistory.com/67 [개발자로 홀로 서기]
-------------------------------------------------
lazy / lateinit 차이
    공통점 및 사용 이유
		kotlin 에서 늦은 초기화를 위한 방법
		변수를 class생성과 동시에 초기화 시에는 꼭 사용하는게 아니라면 오히려 메모리 손해
		-> 따라서 필수요건이 아닌 경우 늦은 초기화 필요
		kotlin에서는 늦은 초기화 시 null을 명시해야 하는데, 꼭 null이 필요하지는 않다.
		Java라면 무조건 null에 대한 접근이 가능하여, 언제든 null로 명시할 수 있지만 kotlin에서는 null은 필요한 경우 명시해야 한다.
		따라서 늦은 초기화 방법 2가지는 아래와 같다.

		1. Late-Initialized Properties : 늦은 초기화를 위한 Properties
		2. lazy : 늦은 초기화가 가능한 Delegated Properties

	lateinit :
		lateinit은 꼭 변수를 부르기 전에 초기화 시켜야 하는데 아래와 같은 조건을 가지고 있다.
			- var(mutable)에서만 사용이 가능하다
			- var이기 때문에 언제든 초기화를 변경할 수 있다.
			- null을 통한 초기화를 할 수 없다.
			- 초기화를 하기 전에는 변수에 접근할 수 없다.
			- lateinit property subject has not been initialized
			- 변수에 대한 setter/getter properties 정의가 불가능하다.
			- lateinit은 모든 변수가 가능한 건 아니고, primitive type에서는 활용이 불가능하다(Int, Double 등)

		즉, lateinit은 필요할 경우 언제든 초기화가 가능한 Properties

	lazy :
		생성 후 값을 변경할 수 없는 val(immutable) 정의인 lazy properties
		기존 val 변수 선언에 by lazy을 추가함으로 lazy {}에 생성과 동시에 값을 초기화하는 방법을 사용

		lazy는 lateinit 과는 반대로 아래의 조건을 가지므로, 상대적으로 편하게 사용이 가능하며, 실수할 일도 줄어든다.
			- 호출 시점에 by lazy 정의에 의해서 초기화를 진행한다.
			- val(immutable)에서만 사용이 가능하다.
			- val이므로 값을 교체하는 건 불가능하다.
			- 초기화를 위해서는 함수명이라도 한번 적어줘야 한다.
			- lazy을 사용하는 경우 기본 Synchronized로 동작한다.

-------------------------------------------------
1. Adapter :
	- 반복적인 형태를 띈 많은 수의 View를 효율적으로 관리하기 위해 재활용 할 수 있는 View로 바꾸고 화면에 필요한 View만
		표시할 수 있도록 함으로써 메모리와 동작에서 큰 효율을 갖고 있음.
	- 반복적인 View는 특정 Frame으로 정의하고 Data만 관리함으로써 개발자는 Frame과 Data만 정의하면 해당 화면을 쉽게 구현
	- 일반적인 Adapter : 데이터의 Add-Remove, 화면의 Refresh가 빈번하더라도 배열에 추가/삭제 후 데이터의 변화를 알리기만 하면
				알아서 화면이 갱신

2. MVP와 Adapter
	- View : 실제 View에 접근하고 화면을 갱신하는 역할을 수행
	- Presenter : View로부터 이벤트를 전달받고 View에서 알 수 없는 Data에 접근하고 로직을 수행하도록 Model에 요청
	- Model : Data에 직접 접근하고 관리함. Presenter가 요청한 작업을 수행
	- MVP 관점에서 보면, Adapter는 View와 Model 의 모습을 가지고 있음 -> mvp 패턴으로 사용 가능

참고 싸이트 : https://medium.com/@jsuch2362/adapter-%EB%88%84%EA%B5%AC%EB%83%90-%EB%84%8C-data-view-2db7eff11c20
-------------------------------------------------
1. RecyclerView는 레이아웃을 구성하는 LayoutManager 들과 RecyclerView.Adapter을 통한 View을 구성할 수 있다.
	그 Adapter에 데이터를 포함하게 된다. Data의 형태도 개발자가 쓰고 싶은 데로 쓸 수 있는 장점을 가진다.
	(ListView에서는 기본 List이다)

참고 싸이트 : https://thdev.tech/android/2018/01/31/Recycler-Adapter-Distinguish.html
-------------------------------------------------
Adapter ? 기존의 ListView에서 사용하는 Adapter와 같은 개념으로 데이터와 아이템에 대한 View생성
	*view, viewHoler생성
	*item과 viewHolder를 bind
	*RecyclerView에게 changes를 notify
	*아이템 클릭등의 interaction 핸들링
	*viewTypes 분기
	*onFailedToRecyclerView를 통해 Recycler복원
	- 내부 구성 요소 : Child helper, Adapter Helper, Recycler

ViewHolder ? 재활용 View에 대한 모든 서브 뷰를 보유

LayoutManager ? 아이템의 항목을 배치
	*리스트, 그리드, 스태그드 그리드 등의 배치를 담당하고 동시에 스크롤도 담당한다.
	*아이템의 focus담당 (리스트를 내릴때 새로운 아이템을 추가해야하는지도 알려준다)
	ex) LinearLayoutManager ? 수평/수직의 스크롤 리스트
	ex) GridLayoutManager ? 그리드 리스트
	ex) StaggeredGridLayoutManage ? 높이가 불구칙적인 형태의 그리드 리스트

ItemDecoration ? 아이템 항목에서 서브뷰에 대한 처리

ItemAnimation ? 아이템 항목이 추가, 제거되거나 정렬될때 애니메이션 처리

참고 싸이트 : https://medium.com/@bansooknam/android-recyclerview-%EC%9A%94%EC%95%BD-aaea4a9c95e7
-------------------------------------------------
-------------------------------------------------




-------------------------------------------------
참고 싸이트
- 안드로이드 디벨로퍼 : https://developer.android.com/guide/
- 소켓 라이브러리 참고 : https://dev-juyoung.github.io/2017/09/05/android-socket-io/
- 커니 github : https://github.com/kunny/kunny-kotlin-book/blob/kotlin-step-2/simple-github/src/main/kotlin/com/androidhuman/example/simplegithub/api/GithubApiProvider.kt
- 태환님 블로그 : https://thdev.tech/categories
